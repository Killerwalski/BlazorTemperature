@page "/temperature"

@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Legends
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.ChartJS.LineChart.Axes
@using ChartJs.Blazor.ChartJS.LineChart.Axes.Ticks
@using static ChartJs.Blazor.Util.ColorUtil

@using BlazorTemperature.Data
@using TemperatureApi.Models

@inject TemperatureDataService TemperatureService

<h3>Temperature</h3>

@if (temperatures == null)
{
    <p><em>Loading Data...</em></p>
}
else
{
    <p>Samples Displayed: @temperatures.Length </p>
    <p>Average Temperature = @string.Format("{0:0.##}", temperatures.Average(p => p.TemperatureF) ) </p>

    <hr />

    <h2>Line Time Chart</h2>
    <ChartJsLineChart @ref="lineChartJs" Config="@lineConfig" Width="600" Height="300" />

}




@code {
    TemperatureEntry[] temperatures;
    //List<TemperatureEntry> temperatures;
    LineConfig lineConfig;
    ChartJsLineChart lineChartJs;

    protected override async Task OnInitializedAsync()
    {
        temperatures = await TemperatureService.GetTemperaturesAsync();

        // ChartsJS
        lineConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Line Chart"
                },
                Legend = new Legend
                {
                    Position = Positions.Right,
                    Labels = new LegendLabelConfiguration
                    {
                        UsePointStyle = true
                    }
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    xAxes = new List<CartesianAxis>
                    {
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Data
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Hour,
                                Round = TimeMeasurement.Hour,
                                TooltipFormat = "YYYY-MM-DD HH:mm",
                                DisplayFormats = TimeDisplayFormats.DE_CH
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Zeit"
                            }
                        }
                        }
                },
                Hover = new LineOptionsHover
                {
                    Intersect = true,
                    Mode = InteractionMode.Y
                }
            }
        };


        var tempDataSet = new LineDataset<TimeTuple<decimal>>
        {
            BackgroundColor = "#ff6384",
            BorderColor = "#ff6384",
            Label = "Temperature in F°",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 3,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False
        };

        tempDataSet.AddRange(temperatures.Select(p => new TimeTuple<decimal>(new Moment(p.Timestamp), p.TemperatureF)));
        lineConfig.Data.Datasets.Add(tempDataSet);
    }

}
